# 1. Core Concepts
## Create a new pod with the NGINX image
```
kubectl run --generator=run-pod/v1 nginx --image=nginx
kubectl run --generator=run-pod/v1 redis --image=redis123
```
# replicasets
```
apiVersion: apps/v1
kind: ReplicaSet
```
# Now scale the ReplicaSet down to 2 PODs
```
master $ kubectl get rs
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   5         5         5       4m
master $ kubectl scale --replicas=2 replicaset.apps/new-replica-set
replicaset.apps/new-replica-set scaled
master $ kubectl get rs
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   2         2         2       4m11s
```
```
master $ kubectl get node node01  --show-labels
NAME      STATUS    ROLES     AGE       VERSION   LABELS
node01    Ready     <none>    48m       v1.11.3   
master $ kubectl label node01 color=blue

master $ kubectl label node node01 color=blue
node/node01 labeled
```
### Create a new deployment named 'blue' with the NGINX image and 6 replicas
```
kubectl run blue --image=nginx --replicas=6
```
### Deploy a pod named nginx-pod using the nginx:alpine image.
```
kubectl run --generator=run-pod/v1 nginx-pod --image=nginx:alpine
kubectl run --generator=run-pod/v1 redis --image=redis:alpine --labels=tier=db
```
### Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas
```
master $ kubectl create deployment webapp --image=kodekloud/webapp-color
master $ kubectl scale deployment.apps/webapp --replicas=3
```
### Expose the webapp as service webapp-service application on port 30082 on the nodes on the cluster. 
```
kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml
```
